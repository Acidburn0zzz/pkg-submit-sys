#!/usr/bin/env perl

# update ~/.ssh/authorized_keys

# 'packagers' contains a list of ssh keys
# for users allowed to push to repositories

# 'core-group' can push to package repos as well as
# merge the [testing] repository to the rest

use strict;
use warnings;
use Fcntl qw(:flock);

my $HOME=$ENV{HOME};
my $basefile="${HOME}/.ssh/admin_keys.pub";
my $authfile="${HOME}/.ssh/authorized_keys";
my $newfile="${authfile}.new";
my $groupfile="${HOME}/admin/groups";
my $newgroupfile="${groupfile}.new";

my $ssh_access="no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty";

# colorful!
sub mydie($@) {
  my ($mesg, @rest) = @_;
  printf STDERR "\033[1;35merror:\033[0;0m ${mesg}\n", @rest;
  exit(1);
}

##
# find a git blob object for a filename
# blob_for_file (filename)
#
sub blob_for_file($) {
  my ($file) = @_;

  my $ret = undef;

  open my $cmd, '-|', 'git ls-tree -r master';
  while (<$cmd>) {
    next unless /blob ([a-f0-9]{40})\s+${file}$/;
    $ret = $1;
    last;
  }
  close $cmd;
  return $ret;
}

##
# Add a user entry to the authorized_keys file to call receive-command
# with the user and their group as parameters.
#
# add_user_entry(out_handle, user, key, role)
#
sub add_user_entry($$$$) {
  my ($fh, $user, $group, $key) = @_;

  printf {$fh} "command=\"%s/bin/receive-command %s %s\",%s %s\n",
    $HOME, $user, $group, $ssh_access, $key;
}

##
# Handle a config line from the 'users' file
#
# add_core (out_handle, line)
#
sub add_users($$) {
  my ($fh, $line) = @_;

  unless($line =~ m/^(\w+):([A-Za-z0-9_-]):\s*(.*)$/){
    print STDERR "invalid line: $line\n";
    return;
  }

  add_user_entry($fh, $1, $2, $3);
}

##
# A line in the 'admin' file is just an ssh key to be added without
# modifcation.
#
# add_admin (out_handle, key)
#
sub add_admin($$) {
  my ($fh, $key) = @_;

  print {$fh} "${key}\n";
}

##
# The 'group' file can simply be cat-ed together...
#
# add_group (out_handle, line)
#
sub add_group($$) {
  my ($fh, $entry) = @_;

  print {$fh} "${entry}\n";
}

##
# Execute a function for each non-empty non-comment line in a git file.
#
# for_file_line (out_handle, file_name, function)
#   out_handle    passed along as first parameter to <function>
#   file_name     the file in the current git-tree to read using blob_for_file
#   function      the function to execute for the file's lines
#                 function(out_handle, line)
#
sub for_file_line($$$) {
  my ($fh, $file, $func) = @_;

  my $blob = blob_for_file($file);
  if (defined($blob)) {
    open my $in, '-|', 'git', 'cat-file', 'blob', $blob;
    while (<$in>) {
      chomp; next if /^(?:#|$)/;
      $func->($fh, $_);
    }
    close $in;
  }
}

##
# Build the authorized_keys file from the current configuration files found
# in git.
#
# build_authorized_keys(out_handle)
#   out_handle    handle to the current authorized_keys.new
#
sub build_authorized_keys($) {
  my ($fh) = @_;

  # cat the basefile into fh
  open my $in, '<', $basefile;
  while (<$in>) {
    print {$fh} $_;
  }
  close $in;

  # process ssh-related config files
  for_file_line($fh, 'admins',     \&add_admin);
  for_file_line($fh, 'users',      \&add_users);
}

##
# Main function doing all the cool work!
#
sub main() {
  # open and lock both the ssh and the group access file
  open my $fh, '>', $newfile or mydie("failed to open new ssh key file");
  flock($fh, LOCK_EX) or mydie("failed to lock new ssh key file");

  open my $grpfh, '>', $newgroupfile or mydie("failed to open new group file");
  flock($grpfh, LOCK_EX) or mydie("failed to lock new group file");

  # ssh keys
  build_authorized_keys($fh);

  # group declarations
  for_file_line($grpfh, 'groups', \&add_group);

  rename($newfile, $authfile) or mydie("failed to replace authorization file");
  rename($newgroupfile, $groupfile) or mydie("failed to replace group file");

  flock($fh, LOCK_UN);
  flock($grpfh, LOCK_UN);
  close($fh);
  close($grpfh);
}

main();
