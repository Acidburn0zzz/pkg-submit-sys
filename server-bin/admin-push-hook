#!/usr/bin/env perl

# update ~/.ssh/authorized_keys

# 'packagers' contains a list of ssh keys
# for users allowed to push to repositories

# 'core-group' can push to package repos as well as
# merge the [testing] repository to the rest

use strict;
use warnings;
use Fcntl qw(:flock);

my $HOME=$ENV{HOME};
my $authfile="${HOME}/.ssh/authorized_keys";
my $basefile="${HOME}/.ssh/admin_keys.pub";
my $newfile="${authfile}.new";

my $access="no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty";

sub mydie($@) {
  my ($mesg, @rest) = @_;
  printf STDERR "\033[1;35merror:\033[0;0m ${mesg}\n", @rest;
  exit(1);
}

sub blob_for_file($) {
  my ($file) = @_;

  my $ret = undef;

  open my $cmd, '-|', 'git ls-tree -r master';
  while (<$cmd>) {
    next unless /blob ([a-f0-9]{40})\s+${file}$/;
    $ret = $1;
    last;
  }
  close $cmd;
  return $ret;
}

sub add_packager($$) {
  my ($fh, $line) = @_;

  unless($line =~ m/^(\w+):\s*(.*)$/){
    print STDERR "invalid line: $line\n";
    return;
  }

  my $user=$1;
  my $key=$2;

  printf {$fh} "command=\"%s/bin/receive-package %s\",%s %s\n",
    $HOME, $user, $access, $key;
}

sub add_core($$) {
  my ($fh, $key) = @_;
  # to do
  return add_packager($fh, $key);
}

sub add_admin($$) {
  my ($fh, $key) = @_;

  print {$fh} "${key}\n";
}

sub for_file($$$) {
  my ($fh, $file, $func) = @_;

  my $blob = blob_for_file($file);
  if (defined($blob)) {
    open my $in, '-|', 'git', 'cat-file', 'blob', $blob;
    while (<$in>) {
      chomp; next if /^(?:#|$)/;
      $func->($fh, $_);
    }
    close $in;
  }
}

sub buildfile($) {
  my ($fh) = @_;

  # cat the basefile into fh
  open my $in, '<', $basefile;
  while (<$in>) {
    print {$fh} $_;
  }
  close $in;

  # process config files
  for_file($fh, 'admins',     \&add_admin);
  for_file($fh, 'packagers',  \&add_packager);
  for_file($fh, 'core-group', \&add_core);
}

sub main() {
  open my $fh, '>', $newfile;
  flock($fh, LOCK_EX);
  buildfile($fh);
  rename($newfile, $authfile) or mydie("failed to replace authorization file");
  flock($fh, LOCK_UN);
  close($fh);
}

main();
