#!/usr/bin/env bash

if ! source "%%LIBDIR%%/absd-utils/common.bash"; then
  echo 'failed to load absd-utils library'
  exit 1
fi

usage() {
  cat <<EOF
usage: ${progname} [options] packages...
options:
  -h, --help        show this help message
  -r, --repo=REPO   upload to this repo instead of [testing]
EOF
}

setonce() {
  eval wasset=\${${2}=NOTSET}
  if (( "$wasset" != "NOTESET" )); then
    echo "option $1 can only be used once"
    usage
    exit 1
  fi
  eval "$2=$3"
}

# option parsing
opt_debug=0
opts=$($GETOPT -n "$progname" -o 'hr:' -l 'help,repo:,debug' -- "$@")
if (( $? != 0 )); then
  usage >&2
  exit 1
fi
eval set -- "$opts"
while (( $# > 0 )); do
  case "$1" in
    -r|--repo) setonce -r opt_repo "$2"; shift 2 ;;
    -h|--help) usage; exit 0 ;;
    --debug) opt_debug=1; shift 1 ;;
    --) shift ; break ;;
    *)  echo "unknown option: $1"; usage; exit 1 ;;
  esac
done

if (( $# == 0 )); then
  usage
  exit 1
fi

# default options
opt_repo="${opt_repo:-testing}"

found=0
for i in "${repo_list[@]}"; do
  if [[ "$i" == "${opt_repo}" ]]; then
    found=1; break;
  fi
done
if (( ! $found )); then
  msg "Warning: repository not recognized: %s" "${opt_repo}"
fi

# And action...!
files=()
check_package() {
  local pkg="$(readlink -f ${1})"
  local sig="${pkg}.sig"
  if [ -f "${sig}" ]; then
    if ! gpg --verify "${sig}" &>/dev/null; then
      die "invalid signature: ${sig}"
    fi
  fi

  if [ ! -f "${sig}" ]; then
    gpg --detach-sign "${pkg}" || die "signing failed"
  fi
  files=("${files[@]}" "$pkg" "$sig")
}

for i in "$@"; do
  check_package "$i"
done

if (( "${#files}" == 0 )); then
  die "No files to upload"
fi

msg "determining file size..."
Now() {
  date '+%s'
}
size=$(stat -Lf '%z' "${files[@]}" | awk 'BEGIN{s=0} {s+=$1} END{print s}')
recv_bytes=0
last=`Now`
speed=""

human_readable() {
  local speed=$1
  local rate='b'
  if (( $speed > 1024 )); then
    rate='K'; speed=$(echo "scale=2; $speed / 1024" | bc)
  fi
  if (( ${speed%.*} > 1024 )); then
    rate='M'; speed=$(echo "scale=2; $speed / 1024" | bc)
  fi
  echo "${speed}${rate}/s"
}

progress() {
  local bytes="$1"
  local percent=$(echo "scale=1; (100*${bytes}) / ${size}" | bc)
  local now=`Now`

  if (( "$now" != "$last" )); then
    local new_bytes=$[bytes - recv_bytes];
    speed=$(human_readable $new_bytes)
    last=$now
    recv_bytes=$bytes
  fi

  printf '*progress: %g%%  (%s)    \r' "${percent}" "${speed}"
}

protocol() {
  while read line; do
    # we expect the host to send us byte sizes, or status messages
    if (( $opt_debug != 0 )); then
      printf 'debug: %s\n' "${line}"
    fi
    case "$line" in
      [0-9]*) # progress update
        progress "${line}"
        ;;
      *) # message
        printf '%s\n' "${line}"
        ;;
    esac
  done
}

# strip away file paths and upload to the server
msg "sending..."
bsdtar -cf - -s "|^.*/|${opt_repo}/|" "${files[@]}" \
  | ssh -i "${identity}" "${repo_user}@${repo_host}" \
  2>&1 | protocol

# vim: set ts=2 sts=2 sw=2 et:
